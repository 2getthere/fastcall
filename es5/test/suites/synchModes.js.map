{"version":3,"sources":["../../../test/suites/synchModes.js"],"names":["fastcall","require","Library","helpers","assert","_","ref","Promise","async","coroutine","describe","libPath","lib","before","findTestlib","lockCounter","beforeEach","syncMode","lock","equal","options","synchronized","queued","oldLock","_lock","isFunction","oldUnlock","_unlock","_mutex","Buffer","call","afterEach","release","it","syncFunction","interface","mul","strictEqual","asyncFunction","queue","syncMul","asyncMul","promises","i","push","test","message","all","strBuff","alloc","a","charCodeAt","reference","appendChar","String","fromCharCode","str","readCString","size","buff","fill"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;AACA,IAAMA,WAAWC,QAAQ,WAAR,CAAjB;AACA,IAAMC,UAAUF,SAASE,OAAzB;AACA,IAAMC,UAAUF,QAAQ,WAAR,CAAhB;AACA,IAAMG,SAASH,QAAQ,QAAR,CAAf;AACA,IAAMI,IAAIJ,QAAQ,QAAR,CAAV;AACA,IAAMK,MAAMN,SAASM,GAArB;AACA,IAAMC,UAAUN,QAAQ,UAAR,CAAhB;AACA,IAAMO,QAAQD,QAAQE,SAAtB;;AAEAC,kCAAkC,YAAY;AAC1C,QAAIC,UAAU,IAAd;AACA,QAAIC,MAAM,IAAV;AACAC,WAAOL,8BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACOL,QAAQW,WAAR,EADP;;AAAA;AACTH,+BADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN,EAAP;;AAIAD,aAAS,MAAT,EAAiB,YAAY;AACzB,YAAIK,cAAc,IAAlB;;AAEAC,mBAAW,YAAY;AACnBJ,kBAAM,IAAIV,OAAJ,CAAYS,OAAZ,EAAqB,EAAEM,UAAUf,QAAQe,QAAR,CAAiBC,IAA7B,EAArB,CAAN;AACAd,mBAAOe,KAAP,CAAaP,IAAIQ,OAAJ,CAAYH,QAAzB,EAAmCf,QAAQe,QAAR,CAAiBC,IAApD;AACAd,mBAAOQ,IAAIS,YAAX;AACAjB,mBAAO,CAACQ,IAAIU,MAAZ;AACAP,0BAAc,IAAd;AACA,gBAAMQ,UAAUX,IAAIY,KAApB;AACApB,mBAAOC,EAAEoB,UAAF,CAAaF,OAAb,CAAP;AACA,gBAAMG,YAAYd,IAAIe,OAAtB;AACAvB,mBAAOC,EAAEoB,UAAF,CAAaC,SAAb,CAAP;AACAd,gBAAIY,KAAJ,GAAY,YAAM;AACdT,8BAAc,CAACA,eAAe,CAAhB,IAAqB,CAAnC;AACAX,uBAAOQ,IAAIgB,MAAJ,YAAsBC,MAA7B;AACA,uBAAON,QAAQO,IAAR,CAAalB,GAAb,CAAP;AACH,aAJD;AAKAA,gBAAIe,OAAJ,GAAc,YAAM;AAChB,kBAAEZ,WAAF;AACAX,uBAAOW,eAAe,CAAtB;AACAX,uBAAOQ,IAAIgB,MAAJ,YAAsBC,MAA7B;AACA,uBAAOH,UAAUI,IAAV,CAAelB,GAAf,CAAP;AACH,aALD;AAMH,SArBD;;AAuBAmB,kBAAU,YAAY;AAClBnB,gBAAIoB,OAAJ;AACH,SAFD;;AAIAtB,iBAAS,MAAT,EAAiB,YAAY;AACzBuB,eAAG,+BAAH,EAAoC,YAAY;AAC5CrB,oBAAIsB,YAAJ,CAAiB,4BAAjB;AACA9B,uBAAOe,KAAP,CAAaP,IAAIuB,SAAJ,CAAcC,GAAd,CAAkB,EAAlB,EAAsB,CAAtB,CAAb,EAAuC,EAAvC;AACAhC,uBAAOiC,WAAP,CAAmBtB,WAAnB,EAAgC,CAAhC;AACH,aAJD;AAKH,SAND;;AAQAL,iBAAS,OAAT,EAAkB,YAAY;AAC1BuB,eAAG,+BAAH,EAAoCzB,8BAAM;AAAA;AAAA;AAAA;AAAA;AACtCI,oCAAI0B,aAAJ,CAAkB,4BAAlB;AADsC,+CAEtClC,MAFsC;AAAA;AAAA,uCAEnBQ,IAAIuB,SAAJ,CAAcC,GAAd,CAAkB,EAAlB,EAAsB,CAAtB,CAFmB;;AAAA;AAAA;;AAAA,6CAE/BjB,KAF+B,kCAEO,EAFP;;AAGtCf,uCAAOiC,WAAP,CAAmBtB,WAAnB,EAAgC,CAAhC;;AAHsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAN,EAApC;AAKH,SAND;AAOH,KA7CD;;AA+CAL,aAAS,OAAT,EAAkB,YAAY;AAC1BM,mBAAW,YAAY;AACnBJ,kBAAM,IAAIV,OAAJ,CAAYS,OAAZ,EAAqB,EAAEM,UAAUf,QAAQe,QAAR,CAAiBsB,KAA7B,EAArB,CAAN;AACAnC,mBAAOe,KAAP,CAAaP,IAAIQ,OAAJ,CAAYH,QAAzB,EAAmCf,QAAQe,QAAR,CAAiBsB,KAApD;AACAnC,mBAAO,CAACQ,IAAIS,YAAZ;AACAjB,mBAAOQ,IAAIU,MAAX;AACH,SALD;;AAOAS,kBAAU,YAAY;AAClBnB,gBAAIoB,OAAJ;AACH,SAFD;;AAIAtB,iBAAS,MAAT,EAAiB,YAAY;AACzBuB,eAAG,0DAAH,EAA+DzB,8BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AACjEI,oCAAIsB,YAAJ,CAAiB,4BAAjB;AACMM,uCAF2D,GAEjD5B,IAAIuB,SAAJ,CAAcC,GAFmC;AAG3DK,wCAH2D,GAGhDD,QAAQhC,KAHwC;AAIjE;;AACAJ,uCAAOe,KAAP,CAAaqB,QAAQ,EAAR,EAAY,CAAZ,CAAb,EAA6B,EAA7B;AACA;AANiE,+CAOjEpC,MAPiE;AAAA;AAAA,uCAO9CqC,SAAS,EAAT,EAAa,CAAb,CAP8C;;AAAA;AAAA;;AAAA,6CAO1DtB,KAP0D,kCAO7B,EAP6B;;AAS3DuB,wCAT2D,GAShD,EATgD;;AAUjE,qCAASC,CAAT,GAAa,CAAb,EAAgBA,IAAI,GAApB,EAAyBA,GAAzB,EAA8B;AAC1BD,6CAASE,IAAT,CAAcH,SAAS,EAAT,EAAa,CAAb,CAAd;AACH;;AAZgE;;AAe7DD,wCAAQ,EAAR,EAAY,CAAZ;AACApC,uCAAO,KAAP,EAAc,aAAd;AAhB6D;AAAA;;AAAA;AAAA;AAAA;;AAmB7DA,uCAAO,CAAC,cAAcyC,IAAd,CAAmB,aAAIC,OAAvB,CAAR;AACA1C,uCAAO,YAAYyC,IAAZ,CAAiB,aAAIC,OAArB,CAAP;;AApB6D;AAAA;AAAA;AAAA,uCAuBvDvC,QAAQwC,GAAR,CAAYL,QAAZ,CAvBuD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAN,EAA/D;AA0BH,SA3BD;;AA6BAhC,iBAAS,OAAT,EAAkB,YAAY;AAC1BuB,eAAG,yCAAH,EAA8CzB,8BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAChDI,oCAAI0B,aAAJ,CAAkB,qDAAlB;;AAEMI,wCAH0C,GAG/B,EAH+B;AAI1CM,uCAJ0C,GAIhCC,MAAM,EAAN,CAJgC;AAK1CC,iCAL0C,GAKtC,IAAIC,UAAJ,CAAe,CAAf,CALsC;AAM5CC,yCAN4C,GAMhC,EANgC;;AAOhD,qCAAST,CAAT,GAAa,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AACzBD,6CAASE,IAAT,CAAchC,IAAIuB,SAAJ,CAAckB,UAAd,CAAyBL,OAAzB,EAAkCL,CAAlC,EAAqCO,IAAIP,CAAzC,CAAd;AACAS,iDAAaE,OAAOC,YAAP,CAAoBL,IAAIP,CAAxB,CAAb;AACH;AAV+C;AAAA,uCAW1CpC,QAAQwC,GAAR,CAAYL,QAAZ,CAX0C;;AAAA;AAY1Cc,mCAZ0C,GAYpClD,IAAImD,WAAJ,CAAgBT,OAAhB,EAAyB,CAAzB,CAZoC;;AAahD5C,uCAAOe,KAAP,CAAaqC,GAAb,EAAkBJ,SAAlB;;AAbgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAN,EAA9C;AAeH,SAhBD;AAiBH,KA1DD;AA2DH,CAjHD;;AAmHA,SAASH,KAAT,CAAeS,IAAf,EAAqB;AACjB,QAAI7B,OAAOoB,KAAX,EAAkB;AACdpB,eAAOoB,KAAP,CAAaS,IAAb;AACH;AACD,QAAMC,OAAO,IAAI9B,MAAJ,CAAW6B,IAAX,CAAb;AACAC,SAAKC,IAAL,CAAU,CAAV;AACA,WAAOD,IAAP;AACH","file":"synchModes.js","sourcesContent":["/*\r\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n'use strict';\r\nconst fastcall = require('../../lib');\r\nconst Library = fastcall.Library;\r\nconst helpers = require('./helpers');\r\nconst assert = require('assert');\r\nconst _ = require('lodash');\r\nconst ref = fastcall.ref;\r\nconst Promise = require('bluebird');\r\nconst async = Promise.coroutine;\r\n\r\ndescribe(`Synchronization Modes`, function () {\r\n    let libPath = null;\r\n    let lib = null;\r\n    before(async(function* () {\r\n        libPath = yield helpers.findTestlib();\r\n    }));\r\n\r\n    describe('lock', function () {\r\n        let lockCounter = null;\r\n\r\n        beforeEach(function () {\r\n            lib = new Library(libPath, { syncMode: Library.syncMode.lock });\r\n            assert.equal(lib.options.syncMode, Library.syncMode.lock);\r\n            assert(lib.synchronized);\r\n            assert(!lib.queued);\r\n            lockCounter = null;\r\n            const oldLock = lib._lock;\r\n            assert(_.isFunction(oldLock));\r\n            const oldUnlock = lib._unlock;\r\n            assert(_.isFunction(oldUnlock));\r\n            lib._lock = () => {\r\n                lockCounter = (lockCounter || 0) + 1;\r\n                assert(lib._mutex instanceof Buffer);\r\n                return oldLock.call(lib);\r\n            };\r\n            lib._unlock = () => {\r\n                --lockCounter;\r\n                assert(lockCounter >= 0);\r\n                assert(lib._mutex instanceof Buffer);\r\n                return oldUnlock.call(lib);\r\n            };\r\n        });\r\n\r\n        afterEach(function () {\r\n            lib.release();\r\n        });\r\n\r\n        describe('sync', function () {\r\n            it('should create and use a mutex', function () {\r\n                lib.syncFunction('int mul(int value, int by)');\r\n                assert.equal(lib.interface.mul(21, 2), 42);\r\n                assert.strictEqual(lockCounter, 0);         \r\n            });\r\n        });\r\n\r\n        describe('async', function () {\r\n            it('should create and use a mutex', async(function* () {\r\n                lib.asyncFunction('int mul(int value, int by)');\r\n                assert.equal(yield lib.interface.mul(21, 2), 42);\r\n                assert.strictEqual(lockCounter, 0);         \r\n            }));\r\n        });\r\n    });\r\n\r\n    describe('queue', function () {\r\n        beforeEach(function () {\r\n            lib = new Library(libPath, { syncMode: Library.syncMode.queue });\r\n            assert.equal(lib.options.syncMode, Library.syncMode.queue);\r\n            assert(!lib.synchronized);\r\n            assert(lib.queued);\r\n        });\r\n\r\n        afterEach(function () {\r\n            lib.release();\r\n        });\r\n\r\n        describe('sync', function () {\r\n            it('should fail when there are async operations in the queue', async(function* () {\r\n                lib.syncFunction('int mul(int value, int by)');\r\n                const syncMul = lib.interface.mul;\r\n                const asyncMul = syncMul.async;\r\n                // sync ok:\r\n                assert.equal(syncMul(21, 2), 42);\r\n                // async ok:\r\n                assert.equal(yield asyncMul(21, 2), 42);\r\n\r\n                const promises = [];\r\n                for (let i = 0; i < 100; i++) {\r\n                    promises.push(asyncMul(21, 2));\r\n                }\r\n                \r\n                try {\r\n                    syncMul(21, 2);\r\n                    assert(false, 'unreachable');\r\n                }\r\n                catch (err) {\r\n                    assert(!/unreachable/.test(err.message));\r\n                    assert(/forbidden/.test(err.message));\r\n                }\r\n                finally {\r\n                    yield Promise.all(promises);\r\n                }\r\n            }));\r\n        });\r\n\r\n        describe('async', function () {\r\n            it('should queue asyncronous function calls', async(function* () {\r\n                lib.asyncFunction('void appendChar(char* str, uint pos, char charCode)');\r\n\r\n                const promises = [];\r\n                const strBuff = alloc(21);\r\n                const a = 'a'.charCodeAt(0);\r\n                let reference = '';\r\n                for (let i = 0; i < 20; i++) {\r\n                    promises.push(lib.interface.appendChar(strBuff, i, a + i));\r\n                    reference += String.fromCharCode(a + i);\r\n                }\r\n                yield Promise.all(promises);\r\n                const str = ref.readCString(strBuff, 0);\r\n                assert.equal(str, reference);\r\n            }));\r\n        });\r\n    });\r\n});\r\n\r\nfunction alloc(size) {\r\n    if (Buffer.alloc) {\r\n        Buffer.alloc(size);\r\n    }\r\n    const buff = new Buffer(size);\r\n    buff.fill(0);\r\n    return buff;\r\n}"]}