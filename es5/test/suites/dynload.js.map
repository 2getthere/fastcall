{"version":3,"sources":["../../../test/suites/dynload.js"],"names":["native","require","helpers","assert","_","Promise","async","coroutine","describe","dynload","libPath","before","findTestlib","it","isObject","isFunction","loadLibrary","freeLibrary","findSymbol","pLib","isBuffer","equal","length","pMul","ok","throws"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;AACA,IAAMA,SAASC,QAAQ,kBAAR,CAAf;AACA,IAAMC,UAAUD,QAAQ,WAAR,CAAhB;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;AACA,IAAMG,IAAIH,QAAQ,QAAR,CAAV;AACA,IAAMI,UAAUJ,QAAQ,UAAR,CAAhB;AACA,IAAMK,QAAQD,QAAQE,SAAtB;;AAEAC,SAAS,0BAAT,EAAqC,YAAY;AAC7C,QAAMC,UAAUT,OAAOS,OAAvB;AACA,QAAIC,UAAU,IAAd;AACAC,WAAOL,8BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACOJ,QAAQU,WAAR,EADP;;AAAA;AACTF,+BADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN,EAAP;;AAIAG,OAAG,yBAAH,EAA8B,YAAY;AACtCV,eAAOC,EAAEU,QAAF,CAAWd,MAAX,CAAP;AACAG,eAAOC,EAAEU,QAAF,CAAWL,OAAX,CAAP;AACH,KAHD;;AAKAI,OAAG,+BAAH,EAAoC,YAAY;AAC5CV,eAAOC,EAAEW,UAAF,CAAaN,QAAQO,WAArB,CAAP;AACAb,eAAOC,EAAEW,UAAF,CAAaN,QAAQQ,WAArB,CAAP;AACAd,eAAOC,EAAEW,UAAF,CAAaN,QAAQS,UAArB,CAAP;AACH,KAJD;;AAMAL,OAAG,0DAAH,EAA+D,YAAY;AACvE,YAAMM,OAAOV,QAAQO,WAAR,CAAoBN,OAApB,CAAb;AACAP,eAAOC,EAAEgB,QAAF,CAAWD,IAAX,CAAP;AACAhB,eAAOkB,KAAP,CAAaF,KAAKG,MAAlB,EAA0B,CAA1B;AACA,YAAMC,OAAOd,QAAQS,UAAR,CAAmBC,IAAnB,EAAyB,KAAzB,CAAb;AACAhB,eAAOqB,EAAP,CAAUD,IAAV;AACApB,eAAOC,EAAEgB,QAAF,CAAWG,IAAX,CAAP;AACApB,eAAOkB,KAAP,CAAaE,KAAKD,MAAlB,EAA0B,CAA1B;AACAb,gBAAQQ,WAAR,CAAoBE,IAApB;AACH,KATD;;AAWAN,OAAG,4CAAH,EAAiD,YAAY;AACzDV,eAAOsB,MAAP,CAAc;AAAA,mBAAMhB,QAAQO,WAAR,CAAoB,eAApB,CAAN;AAAA,SAAd;AACH,KAFD;;AAIAH,OAAG,0DAAH,EAA+D,YAAY;AACvEV,eAAOsB,MAAP,CAAc;AAAA,mBAAMhB,QAAQO,WAAR,EAAN;AAAA,SAAd;AACH,KAFD;;AAIAH,OAAG,4CAAH,EAAiD,YAAY;AACzD,YAAMM,OAAOV,QAAQO,WAAR,CAAoBN,OAApB,CAAb;AACAP,eAAOM,QAAQS,UAAR,CAAmBC,IAAnB,EAAyB,IAAzB,MAAmC,IAA1C;AACAV,gBAAQQ,WAAR,CAAoBE,IAApB;AACH,KAJD;AAKH,CA1CD","file":"dynload.js","sourcesContent":["/*\r\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n'use strict';\r\nconst native = require('../../lib/native');\r\nconst helpers = require('./helpers');\r\nconst assert = require('assert');\r\nconst _ = require('lodash');\r\nconst Promise = require('bluebird');\r\nconst async = Promise.coroutine;\r\n\r\ndescribe('native dynload interface', function () {\r\n    const dynload = native.dynload;\r\n    let libPath = null;\r\n    before(async(function* () {\r\n        libPath = yield helpers.findTestlib();\r\n    }));\r\n\r\n    it('should export an object', function () {\r\n        assert(_.isObject(native));\r\n        assert(_.isObject(dynload));\r\n    });\r\n\r\n    it('should expose dynload methods', function () {\r\n        assert(_.isFunction(dynload.loadLibrary));\r\n        assert(_.isFunction(dynload.freeLibrary));\r\n        assert(_.isFunction(dynload.findSymbol));\r\n    });\r\n\r\n    it('should load a library, and find a function pointer there', function () {\r\n        const pLib = dynload.loadLibrary(libPath);\r\n        assert(_.isBuffer(pLib));\r\n        assert.equal(pLib.length, 0);\r\n        const pMul = dynload.findSymbol(pLib, 'mul');\r\n        assert.ok(pMul);\r\n        assert(_.isBuffer(pMul));\r\n        assert.equal(pMul.length, 0);\r\n        dynload.freeLibrary(pLib);\r\n    });\r\n\r\n    it('should throw, when library doesn\\'t exsist', function () {\r\n        assert.throws(() => dynload.loadLibrary('bubukittyfuck'));\r\n    });\r\n\r\n    it('should throw, when loadLibrary\\'s first argument missing', function () {\r\n        assert.throws(() => dynload.loadLibrary());\r\n    });\r\n\r\n    it('should return null when function not found', function () {\r\n        const pLib = dynload.loadLibrary(libPath);\r\n        assert(dynload.findSymbol(pLib, '42') === null);\r\n        dynload.freeLibrary(pLib);\r\n    });\r\n});"]}