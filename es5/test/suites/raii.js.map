{"version":3,"sources":["test/suites/raii.js"],"names":["_","require","assert","Promise","async","coroutine","fastcall","scope","Scoped","Disposable","dispose","isFunction","doAsync","f","describe","it","disposed","value","result","delay"],"mappings":"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","file":"raii.js","sourcesContent":["'use strict';\nconst _ = require('lodash');\nconst assert = require('assert');\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\nconst fastcall = require('../../lib');\nconst scope = fastcall.scope;\nconst Scoped = fastcall.Scoped;\n\nclass Disposable extends Scoped {\n    constructor(dispose) {\n        assert(_.isFunction(dispose));\n        super();\n        this.dispose = dispose;\n    }\n}\n\nfunction doAsync(f) {\n    return async(f)();\n}\n\ndescribe('RAII scope', function () {\n    describe('sync', function () {\n        it('should propagate value to parent scope', function () {\n            let disposed = false;\n            const dispose = () => disposed = true;\n            scope(() => {\n                scope(() => {\n                    assert(!disposed);\n                    const value = new Disposable(dispose);\n                    assert(!disposed);\n                    return value;\n                });\n                assert(!disposed);\n            });\n            assert(disposed);\n        });\n\n        it('should detach value at root scope', function () {\n            let disposed = false;\n            const dispose = () => disposed = true;\n            scope(() => {\n                const result = scope(() => {\n                    assert(!disposed);\n                    const value = new Disposable(dispose);\n                    assert(!disposed);\n                    return value;\n                });\n                assert(!disposed);\n                return result;\n            });\n            assert(!disposed);\n        });\n\n        it('should propagate array to parent scope', function () {\n            let disposed = false;\n            const dispose = () => disposed = true;\n            scope(() => {\n                scope(() => {\n                    assert(!disposed);\n                    const value = new Disposable(dispose);\n                    assert(!disposed);\n                    return [value];\n                });\n                assert(!disposed);\n            });\n            assert(disposed);\n        });\n\n        it('should propagate object to parent scope', function () {\n            let disposed = false;\n            const dispose = () => disposed = true;\n            scope(() => {\n                scope(() => {\n                    assert(!disposed);\n                    const value = new Disposable(dispose);\n                    assert(!disposed);\n                    return { value };\n                });\n                assert(!disposed);\n            });\n            assert(disposed);\n        });\n\n        it('should propagate array of objects to parent scope', function () {\n            let disposed = false;\n            const dispose = () => disposed = true;\n            scope(() => {\n                scope(() => {\n                    assert(!disposed);\n                    const value = new Disposable(dispose);\n                    assert(!disposed);\n                    return [{ value }, { value }];\n                });\n                assert(!disposed);\n            });\n            assert(disposed);\n        });\n    });\n\n    describe('async', function () {\n        it('should propagate value to parent scope', function () {\n            return doAsync(function* () {\n                let disposed = false;\n                const dispose = () => disposed = true;\n                yield scope.async(function* () {\n                    yield scope.async(function* () {\n                        assert(!disposed);\n                        const value = new Disposable(dispose);\n                        assert(!disposed);\n                        yield Promise.delay(1);\n                        return value;\n                    });\n                    assert(!disposed);\n                });\n                assert(disposed);\n            });\n        });\n    });\n});"]}