{"version":3,"sources":["../../../test/suites/ffiCompatibility.js"],"names":["ffi","require","ref","ArrayType","UnionType","StructType","Library","Callback","helpers","assert","_","Promise","async","coroutine","describe","libPath","before","findTestlib","it","isObject","isFunction","lib","mul","getString","equal","readCString","release","done","asyncPromise","err","res","setImmediate","isUndefined","makeInt","v","cb","types","float","double","deepEqual","keys","_library","callbacks","TRecWithArray","values","long","index","TRecWithArrays","incRecWithArrays","refType","structs","arrays","records","get","i","TUnion","a","b","c","TTaggedUnion","tag","data","getValueFromTaggedUnion","unions","struct","charCodeAt","result"],"mappings":"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","file":"ffiCompatibility.js","sourcesContent":["/*\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nconst ffi = require('../../lib').ffi;\nconst ref = ffi.ref;\nconst ArrayType = ffi.ArrayType;\nconst UnionType = ffi.UnionType;\nconst StructType = ffi.StructType;\nconst Library = ffi.Library;\nconst Callback = ffi.Callback;\nconst helpers = require('./helpers');\nconst assert = require('assert');\nconst _ = require('lodash');\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\n\ndescribe('ffi compatibility', function () {\n    let libPath = null;\n    before(async(function* () {\n        libPath = yield helpers.findTestlib();\n    }));\n\n    it('supports required interface', function () {\n        assert(_.isObject(ffi));\n        assert(_.isObject(ref));\n        assert(_.isFunction(ArrayType));\n        assert(_.isFunction(UnionType));\n        assert(_.isFunction(StructType));\n        assert(_.isFunction(Library));\n        assert(_.isFunction(Callback));\n    });\n\n    describe('functions', function () {\n        it('supports multiple function definition', function () {\n            const lib = ffi.Library(libPath, {\n                mul: [ 'int', [ 'int', 'int' ]],\n                getString: [ 'char*', [] ]\n            });\n\n            try {\n                assert(_.isFunction(lib.mul));\n                assert.equal(lib.mul(21, 2), 42);\n                assert.equal(ref.readCString(lib.getString()), 'world');\n            }\n            finally {\n                lib.release();\n            }\n        });\n\n        describe('async', function () {\n            it('supported explicitly', function (done) {\n                const lib = ffi.Library(libPath, {\n                    mul: [ 'int', [ 'int', 'int' ]]\n                });\n\n                try {\n                    assert(_.isFunction(lib.mul));\n                    assert(_.isFunction(lib.mul.async));\n                    assert(_.isFunction(lib.mul.asyncPromise));\n                    lib.mul.async(21, 2, (err, res) => {\n                        setImmediate(() => lib.release());\n                        if (err) {\n                            done(err);\n                        }\n                        try {\n                            assert.equal(res, 42);\n                            done();\n                        }\n                        catch (err) {\n                            done(err);\n                        }\n                    });\n                }\n                catch (err) {\n                    lib.release();\n                    done(err);\n                }\n            });\n\n            it('supported in options', function (done) {\n                const lib = ffi.Library(\n                    libPath, \n                    {\n                        mul: [ 'int', [ 'int', 'int' ]]\n                    },\n                    {\n                        async: true\n                    });\n\n                try {\n                    assert(_.isFunction(lib.mul));\n                    assert(_.isUndefined(lib.mul.async));\n                    assert(_.isFunction(lib.mul.asyncPromise));\n                    lib.mul(21, 2, (err, res) => {\n                        setImmediate(() => lib.release());\n                        if (err) {\n                            done(err);\n                        }\n                        try {\n                            assert.equal(res, 42);\n                            done();\n                        }\n                        catch (err) {\n                            done(err);\n                        }\n                    });\n                }\n                catch (err) {\n                    lib.release();\n                    done(err);\n                }\n            });\n        });\n\n        it('supports promises', async(function* () {\n            const lib = ffi.Library(libPath, {\n                mul: [ 'int', [ 'int', 'int' ]]\n            });\n\n            try {\n                assert(_.isFunction(lib.mul));\n                assert(_.isFunction(lib.mul.async));\n                assert(_.isFunction(lib.mul.asyncPromise));\n                assert.equal(yield lib.mul.asyncPromise(21, 2), 42);\n            }\n            finally {\n                lib.release();\n            }\n        }));\n    });\n\n    describe('callback', function () {\n        describe('sync', function () {\n            it('supports ffi-style callbacks', function () {\n                const lib = ffi.Library(libPath, {\n                    makeInt: ['int', ['float', 'double', 'pointer'] ]\n                });\n\n                try {\n                    let v = 0.1;\n                    const cb = new Callback(\n                        'int', [ref.types.float, 'double'],\n                        function (float, double) {\n                            return float + double + v; \n                        });\n                    \n                    assert(_.isFunction(lib.makeInt));\n                    assert(_.isFunction(lib.makeInt.async));\n                    assert(_.isFunction(lib.makeInt.asyncPromise));\n                    assert.deepEqual(_.keys(lib._library.callbacks), []);\n                    assert.equal(lib.makeInt(19.9, 2, cb), 42);\n                    v += 0.1;\n                    assert.equal(lib.makeInt(19.9, 2, cb), 44);\n                    assert.deepEqual(_.keys(lib._library.callbacks), ['FFICallback0']);\n                }\n                finally {\n                    lib.release();\n                }\n            });\n        });\n\n        describe('async', function () {\n            it('supports ffi-style callbacks', function (done) {\n                const lib = ffi.Library(libPath, {\n                    makeInt: ['int', ['float', 'double', 'pointer'] ]\n                });\n\n                try {\n                    const cb = new Callback(\n                        'int', [ref.types.float, 'double'],\n                        function (float, double) {\n                            return float + double + 0.1; \n                        });\n\n                    assert(_.isFunction(lib.makeInt));\n                    assert(_.isFunction(lib.makeInt.async));\n                    assert(_.isFunction(lib.makeInt.asyncPromise));\n                    assert.deepEqual(_.keys(lib._library.callbacks), []);\n                    lib.makeInt.async(19.9, 2, cb, (err, res) => {\n                        setImmediate(() => lib.release());\n                        if (err) {\n                            done(err);\n                        }\n                        try {\n                            assert.equal(res, 42);\n                            assert.deepEqual(_.keys(lib._library.callbacks), ['FFICallback0']);\n                            done();\n                        }\n                        catch (err) {\n                            done(err);\n                        }\n                    });\n                }\n                catch (err) {\n                    lib.release();\n                    done(err);\n                }\n            });\n        });\n    });\n\n    describe('array of structs', function () {\n        it('is supported', function () {\n            const TRecWithArray = new StructType({\n                values: new ArrayType(ref.types.long, 5),\n                index: 'uint',\n            });\n            const TRecWithArrays = new ArrayType(TRecWithArray);\n            const lib = ffi.Library(libPath, {\n                incRecWithArrays: [ 'void', [ ref.refType(TRecWithArray), 'long' ]]\n            });\n            assert.deepEqual(_.keys(lib._library.structs), ['StructType0']);\n            assert.deepEqual(_.keys(lib._library.arrays), []);\n            \n            try {\n                const records = new TRecWithArrays([\n                    {\n                        index: 4,\n                        values: [3, 4, 5, 6, 7]\n                    },\n                    new TRecWithArray({\n                        index: 5,\n                        values: [-3, -4, -5, -6, -7]\n                    })\n                ]);\n\n                lib.incRecWithArrays(records, 2);\n                assert.deepEqual(_.keys(lib._library.structs), ['StructType0']);\n                assert.deepEqual(_.keys(lib._library.arrays), []);\n\n                assert.equal(records.get(0).index, 5);\n                assert.equal(records.get(1).index, 6);\n\n                for (let i = 0; i < 5; i++) {\n                    assert.equal(records.get(0).values.get(i), i + 4);\n                    assert.equal(records.get(1).values.get(i), -2 - i);\n                }\n            }\n            finally {\n                lib.release();\n            }\n        });\n    });\n\n    describe('tagged union', function () {\n        it('is supported', function () {\n            const TUnion = new UnionType({\n                a: 'short',\n                b: 'int64',\n                c: 'long'\n            });\n            const TTaggedUnion = new StructType({\n                tag: 'char',\n                data: TUnion\n            });\n            const lib = ffi.Library(libPath, {\n                getValueFromTaggedUnion: [ 'int64', [ ref.refType(TTaggedUnion) ]]\n            });\n            assert.deepEqual(_.keys(lib._library.unions), []);\n            assert.deepEqual(_.keys(lib._library.structs), ['StructType0']);\n\n            try {\n                let struct = new TTaggedUnion({\n                    tag: 'b'.charCodeAt(0),\n                    data: { b: 42 }\n                });\n\n                assert(_.isObject(struct));\n                assert.equal(struct.tag, 'b'.charCodeAt(0));\n                assert.equal(struct.data.b, 42);\n\n                let result = lib.getValueFromTaggedUnion(struct.ref());\n                assert.equal(result, 42);\n\n                struct = new TTaggedUnion({\n                    tag: 'b'.charCodeAt(0),\n                    data: new TUnion({ b: 42 })\n                });\n\n                assert(_.isObject(struct));\n                assert.equal(struct.tag, 'b'.charCodeAt(0));\n                assert.equal(struct.data.b, 42);\n\n                result = lib.getValueFromTaggedUnion(struct.ref());\n                assert.equal(result, 42);\n\n                assert.deepEqual(_.keys(lib._library.unions), []);  \n                assert.deepEqual(_.keys(lib._library.structs), ['StructType0']);\n            }\n            finally {\n                lib.release();\n            }\n        });\n    });\n});"]}