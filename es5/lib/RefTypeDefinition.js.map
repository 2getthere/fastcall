{"version":3,"sources":["../../lib/RefTypeDefinition.js"],"names":["_","require","assert","verify","ref","Parser","RefTypeDefinition","args","isObject","library","isString","propertyName","_FactoryType","FactoryType","def","parsed","_parse","name","_defBody","defBody","_type","_typeFactory","keys","isFunction","factory","makePtr","value","type","propName","ptr","Buffer","undefined","TypeError","str","parser","parseFields","isPlainObject","_resolveStringTypes","defObj","result","each","key","match","exec","findRefDeclaration","_makeTypeWithLength","len","Number","parseInt","itemType","module","exports"],"mappings":"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","file":"RefTypeDefinition.js","sourcesContent":["'use strict';\nconst _ = require('lodash');\nconst assert = require('assert');\nconst verify = require('./verify');\nconst ref = require('./ref-libs/ref');\nconst Parser = require('./Parser');\n\nclass RefTypeDefinition {\n    constructor(args) {\n        verify(args);\n\n        assert(_.isObject(args.library), '\"library\" is not an object.');\n        verify(_.isString(args.propertyName), '\"args.propertyName\" is not a string.');\n        this.library = args.library;\n        this.propertyName = args.propertyName;\n        this._FactoryType = args.FactoryType;\n\n        if (_.isString(args.def)) {\n            const parsed = this._parse(args.def);\n            this.name = parsed.name;\n            this._defBody = parsed.defBody;\n            this._type = this._typeFactory();\n        }\n        else {\n            this.name = _.keys(args.def)[0];\n            assert(_.isString(this.name), '\"def\" is invalid.');\n            this._defBody = args.def[this.name];\n\n            if (_.isFunction(this._defBody)) {\n                this._type = this._defBody;\n            }\n            else if (_.isObject(this._defBody) || _.isString(this._defBody)) {\n                this._type = this._typeFactory();\n            }\n            else {\n                assert(false, '\"def\" is invalid.');\n            }\n        }\n        this._type[this.propertyName] = this;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    getFactory() {\n        const factory = value => this.makePtr(value);\n        factory[this.propertyName] = this;\n        factory.type = this.type;\n        return factory;\n    }\n\n    makePtr(value) {\n        const propName = this.propertyName;\n        if (value) {\n            if (value[propName] === this) {\n                return value;\n            }\n            if (_.isObject(value)) {\n                const ptr = new this.type(value).ref();\n                ptr[propName] = this;\n                verify(ptr.type === this.type);\n                return ptr;\n            }\n            if (value instanceof Buffer) {\n                if (value.type === undefined) {\n                    value.type = this.type;\n                    value[propName] = this;\n                    return value;\n                }\n                throw new TypeError(`Buffer is not a ${ propName } pointer.`);\n            }\n        }\n        else if (value === null) {\n            return null;\n        }\n        throw new TypeError(`Cannot make ${ propName } from: ` + value);\n    }\n\n    _parse(str) {\n        const parser = new Parser(this.library);\n        return parser.parseFields(str, this.propertyName);\n    }\n\n    _typeFactory() {\n        verify(_.isFunction(this._FactoryType), '\"args.FactoryType\" is not a function.');\n        verify(this._defBody);\n        if (_.isPlainObject(this._defBody)) {\n            this._defBody = this._resolveStringTypes(this._defBody);\n        }\n        return new this._FactoryType(this._defBody);\n    }\n\n    _resolveStringTypes(defObj) {\n        const result = {};\n        _.each(defObj, (value, key) => {\n            let type = defObj[key];\n            if (_.isString(type)) {\n                let match = /(\\w+)\\s*(?:\\[\\s*(\\d+)\\s*\\])?/.exec(type);\n                if (match) {\n                    type = match[1];\n                    let def = this.library.findRefDeclaration(type);\n                    if (def) {\n                        type = def.type;\n                        if (match[2]) {\n                            type = def._makeTypeWithLength(match[2]);\n                        }\n                    }\n                }\n            }\n            result[key] = type;\n        });\n        return result;\n    }\n\n    _makeTypeWithLength(len) {\n        len = _.isString(len) ? Number.parseInt(len) : len;\n        let itemType = this._defBody;\n        let FactoryType = this._FactoryType;\n        assert(len > 0 && itemType && _.isFunction(FactoryType), 'Invalid array type definition.');\n        return new FactoryType(itemType, len);\n    }\n}\n\nmodule.exports = RefTypeDefinition;"]}