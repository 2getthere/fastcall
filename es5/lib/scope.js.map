{"version":3,"sources":["lib/scope.js"],"names":["enumScoped","_","require","verify","assert","Promise","module","exports","scope","body","isFunction","begin","result","then","asyncResult","escape","end","asyncError","err","_add","scoped","add","async","coroutine","value","layers","push","Set","last","pop","values","_dispose","layer","enabled","Scoped","currentLayer","length","propagate","prevLayer","delete","isArray","item","Map","isObject","key","hasOwnProperty"],"mappings":"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","file":"scope.js","sourcesContent":["'use strict';\nconst _ = require('lodash');\nconst verify = require('./verify');\nconst assert = require('assert');\nconst Promise = require('bluebird');\n\nmodule.exports = scope;\n\nfunction scope(body) {\n    assert(_.isFunction(body), 'Body should be a function.');\n    begin();\n    try {\n        const result = body(scope);\n        if (result) {\n            if (_.isFunction(result.then)) {\n                return result\n                    .then(function (asyncResult) {\n                        escape(asyncResult, true);\n                        end();\n                        return asyncResult;\n                    },\n                    function (asyncError) {\n                        end();\n                        throw asyncError;\n                    });\n            }\n            escape(result, true);\n        }\n        end();\n        return result;\n    }\n    catch (err) {\n        end();\n        throw err;\n    }\n}\n\nscope._add = function (scoped) {\n    add(scoped);\n};\n\nscope.async = function (body) {\n    assert(_.isFunction(body), 'Body should be a function.');\n    return scope(Promise.coroutine(body));\n};\n\nscope.escape = function (value) {\n    return escape(value);\n};\n\nconst layers = [];\n\nfunction begin() {\n    layers.push(new Set());\n}\n\nfunction end() {\n    const last = layers.pop();\n    if (last) {\n        for (let scoped of last.values()) {\n            scoped._dispose();\n        }\n    }\n}\n\nfunction add(scoped, layer) {\n    if (verify.enabled) {\n        const Scoped = scope.Scoped;\n        verify(scoped instanceof Scoped);\n    }\n    const currentLayer = layer || (layers.length ? layers[layers.length - 1] : null);\n    if (currentLayer) {\n        currentLayer.add(scoped);\n    }\n}\n\nfunction escape(result, propagate) {\n    let currentLayer = null;\n    let prevLayer = null;\n    if (layers.length > 1) {\n        currentLayer = layers[layers.length - 1];\n        if (propagate) {\n            prevLayer = layers[layers.length - 2];\n        }\n    }\n    else if (layers.length) {\n        currentLayer = layers[layers.length - 1];\n    }\n\n    if (currentLayer) {\n        for (let scoped of enumScoped(result)) {\n            currentLayer.delete(scoped);\n            if (prevLayer) {\n                prevLayer.add(scoped);\n            }\n        }\n    }\n}\n\nfunction* enumScoped(result) {\n    const Scoped = scope.Scoped;\n    if (result instanceof Scoped) {\n        yield result;\n    }\n    else if (_.isArray(result)) {\n        for (let item of result) {\n            yield* enumScoped(item);\n        }\n    }\n    else if (result instanceof Map || result instanceof Set) {\n        for (let item of result.values()) {\n            yield* enumScoped(item);\n        }\n    }\n    else if (_.isObject(result)) {\n        for (let key in result) {\n            if (result.hasOwnProperty(key)) {\n                yield* enumScoped(result[key]);\n            }\n        }\n    }\n}"]}