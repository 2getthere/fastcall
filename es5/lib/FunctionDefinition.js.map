{"version":3,"sources":["../../lib/FunctionDefinition.js"],"names":["_","require","assert","verify","ref","util","Parser","FunctionDefinition","library","def","isObject","parser","isString","parseFunctionString","resultType","name","args","Object","freeze","isPlainObject","parseFunctionObject","TypeError","length","isArray","signature","_makeSignature","_type","refType","types","void","code","getTypeCode","map","format","getTypeName","arg","type","join","function","callback","typeName","upperFirst","camelCase","replace","api","prefix","indirection","toFastcallName","func","isFunction","argTypes","a","module","exports"],"mappings":"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","file":"FunctionDefinition.js","sourcesContent":["'use strict';\nconst _ = require('lodash');\nconst assert = require('assert');\nconst verify = require('./verify');\nconst ref = require('./ref-libs/ref');\nconst util = require('util');\nconst Parser = require('./Parser');\n\nclass FunctionDefinition {\n    constructor(library, def) {\n        assert(_.isObject(library));\n        this.library = library;\n        const parser = new Parser(library);\n        if (_.isString(def)) {\n            def = parser.parseFunctionString(def);\n            this.resultType = def.resultType;\n            this.name = def.name;\n            this.args = Object.freeze(def.args);\n        }\n        else if (_.isPlainObject(def)) {\n            def = parser.parseFunctionObject(def);\n            this.resultType = def.resultType;\n            this.name = def.name;\n            this.args = Object.freeze(def.args);\n        }\n        else if (def.resultType && def.name && def.args) {\n            this.resultType = def.resultType;\n            this.name = def.name;\n            this.args = Object.freeze(def.args);\n        }\n        else {\n            throw new TypeError(`Invalid function definition: ${ def }.`);\n        }\n\n        assert(_.isObject(this.resultType));\n        assert(_.isString(this.name) && this.name.length);\n        assert(_.isArray(this.args));\n\n        this.signature = this._makeSignature();\n        this._type = ref.refType(ref.types.void);\n        this._type.code = Parser.getTypeCode(this._type);\n        this._type.name = this.name;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    toString() {\n        let args = this.args.map(arg => util.format('%s %s', getTypeName(arg.type), arg.name)).join(', ');\n        return util.format('%s %s(%s)', getTypeName(this.resultType), this.name, args);\n\n        function getTypeName(type) {\n            if (type.function) {\n                return type.function.name;\n            }\n            if (type.callback) {\n                return type.callback.name;\n            }\n            return type.name;\n        }\n    }\n\n    toFastcallName(typeName) {\n        return _.upperFirst(_.camelCase(typeName)).replace('Uint', 'UInt');\n    }\n\n    findFastcallFunc(api, prefix, type) {\n        const name = prefix + (type.indirection > 1 ? 'Pointer' : this.toFastcallName(type.name));\n        const func = api[name];\n        verify(_.isFunction(func));\n        return { name, type, func };\n    }\n\n    _makeSignature() {\n        const argTypes =\n            this.args.map(a => a.type.code);\n\n        return `${ argTypes })${ this.resultType.code }`;\n    }\n}\n\nmodule.exports = FunctionDefinition;"]}