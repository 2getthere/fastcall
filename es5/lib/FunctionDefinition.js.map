{"version":3,"sources":["../../lib/FunctionDefinition.js"],"names":["_","require","assert","verify","a","ert","ref","util","Parser","typeCode","FunctionDefinition","library","def","isObject","parser","isString","isPlainObject","parseFunction","resultType","name","args","Object","freeze","TypeError","length","isArray","signature","_makeSignature","_type","refType","types","void","code","getForType","map","format","getTypeName","arg","type","join","function","callback","typeName","upperFirst","camelCase","replace","api","prefix","indirection","toFastcallName","func","isFunction","argTypes","module","exports"],"mappings":"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","file":"FunctionDefinition.js","sourcesContent":["/*\r\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n'use strict';\r\nconst _ = require('lodash');\r\nconst assert = require('assert');\r\nconst verify = require('./verify');\r\nconst a = verify.a;\r\nconst ert = verify.ert;\r\nconst ref = require('./ref-libs/ref');\r\nconst util = require('util');\r\nconst Parser = require('./Parser');\r\nconst typeCode = require('./typeCode');\r\n\r\nclass FunctionDefinition {\r\n    constructor(library, def) {\r\n        assert(_.isObject(library));\r\n        this.library = library;\r\n        const parser = new Parser(library);\r\n        if (_.isString(def) || _.isPlainObject(def)) {\r\n            def = parser.parseFunction(def);\r\n            this.resultType = def.resultType;\r\n            this.name = def.name;\r\n            this.args = Object.freeze(def.args);\r\n        }\r\n        else if (def.resultType && def.name && def.args) {\r\n            this.resultType = def.resultType;\r\n            this.name = def.name;\r\n            this.args = Object.freeze(def.args);\r\n        }\r\n        else {\r\n            throw new TypeError(`Invalid function definition: ${ def }.`);\r\n        }\r\n\r\n        assert(_.isObject(this.resultType));\r\n        assert(_.isString(this.name) && this.name.length);\r\n        assert(_.isArray(this.args));\r\n\r\n        this.signature = this._makeSignature();\r\n        this._type = ref.refType(ref.types.void);\r\n        this._type.code = typeCode.getForType(this._type);\r\n        this._type.name = this.name;\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    toString() {\r\n        let args = this.args.map(arg => util.format('%s %s', getTypeName(arg.type), arg.name)).join(', ');\r\n        return util.format('%s %s(%s)', getTypeName(this.resultType), this.name, args);\r\n\r\n        function getTypeName(type) {\r\n            if (type.function) {\r\n                return type.function.name;\r\n            }\r\n            if (type.callback) {\r\n                return type.callback.name;\r\n            }\r\n            return type.name;\r\n        }\r\n    }\r\n\r\n    toFastcallName(typeName) {\r\n        return _.upperFirst(_.camelCase(typeName)).replace('Uint', 'UInt');\r\n    }\r\n\r\n    findFastcallFunc(api, prefix, type) {\r\n        const name = prefix + (type.indirection > 1 || type.code === 'p' ? 'Pointer' : this.toFastcallName(type.name));\r\n        const func = api[name];\r\n        a&&ert(_.isFunction(func));\r\n        return { name, type, func };\r\n    }\r\n\r\n    _makeSignature() {\r\n        const argTypes =\r\n            this.args.map(a => a.type.code);\r\n\r\n        return `${ argTypes })${ this.resultType.code }`;\r\n    }\r\n}\r\n\r\nmodule.exports = FunctionDefinition;"]}