{"version":3,"sources":["../../../lib/ref-libs/array.js"],"names":["_ref","require","assert","debug","ArrayIndex","isArray","Array","module","exports","_type","_length","type","coerceType","fixedLength","ArrayType","data","length","call","item_size","BYTES_PER_ELEMENT","arguments","buffer","Buffer","Error","len","i","set","isBuffer","expectedLength","slice","prototype","Object","create","constructor","value","enumerable","writable","configurable","NULL","ref","get","getter","setter","lengthChanged","indirection","size","sizeof","pointer","alignment","alignof","getRef","setRef","untilZeros","offset","array","isInstance","readPointer","ptr","writePointer","origSize","r","types","CString","buf","index","baseType","end","reinterpret","newLength","isNull","start","reinterpretUntilZeros"],"mappings":";AACA;;;;AAIA,IAAIA,OAAOC,QAAQ,OAAR,CAAX;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,QAAQF,QAAQ,OAAR,EAAiB,WAAjB,CAAZ;AACA,IAAIG,aAAaH,QAAQ,cAAR,CAAjB;AACA,IAAII,UAAUC,MAAMD,OAApB;;AAEA;;;;;;AAMAE,OAAOC,OAAP,GAAiB,SAASF,KAAT,CAAgBG,KAAhB,EAAuBC,OAAvB,EAAgC;AAC/CP,QAAM,2BAAN;AACA,MAAIQ,OAAOX,KAAKY,UAAL,CAAgBH,KAAhB,CAAX;AACA,MAAII,cAAcH,UAAU,CAA5B;;AAEA;;;;AAIA,WAASI,SAAT,CAAoBC,IAApB,EAA0BC,MAA1B,EAAkC;AAChC,QAAI,EAAE,gBAAgBF,SAAlB,CAAJ,EAAkC;AAChC,aAAO,IAAIA,SAAJ,CAAcC,IAAd,EAAoBC,MAApB,CAAP;AACD;AACDb,UAAM,6BAAN;AACAC,eAAWa,IAAX,CAAgB,IAAhB;AACA,QAAIC,YAAYJ,UAAUK,iBAA1B;AACA,QAAI,MAAMC,UAAUJ,MAApB,EAA4B;AAC1B;AACA;AACA,UAAIH,cAAc,CAAlB,EAAqB;AACnB,aAAKG,MAAL,GAAcH,WAAd;AACA,aAAKQ,MAAL,GAAc,IAAIC,MAAJ,CAAW,KAAKN,MAAL,GAAcE,SAAzB,CAAd;AACD,OAHD,MAGO;AACL,cAAM,IAAIK,KAAJ,CAAU,sEAAV,CAAN;AACD;AACF,KATD,MASO,IAAI,YAAY,OAAOR,IAAvB,EAA6B;AAClC;AACA,WAAKC,MAAL,GAAcD,IAAd;AACA,WAAKM,MAAL,GAAc,IAAIC,MAAJ,CAAW,KAAKN,MAAL,GAAcE,SAAzB,CAAd;AACD,KAJM,MAIA,IAAIb,QAAQU,IAAR,CAAJ,EAAmB;AACxB;AACA;AACA;AACA,UAAIS,MAAM,CAAV;AACA,UAAI,QAAQR,MAAZ,EAAoB;AAClBQ,cAAMR,MAAN;AACD,OAFD,MAEO,IAAIH,cAAc,CAAlB,EAAqB;AAC1BW,cAAMX,WAAN;AACD,OAFM,MAEA;AACLW,cAAMT,KAAKC,MAAX;AACD;AACD,UAAID,KAAKC,MAAL,GAAcQ,GAAlB,EAAuB;AACrB,cAAM,IAAID,KAAJ,CAAU,mCAAmCC,GAAnC,GAAyC,QAAzC,GAAoDT,KAAKC,MAAnE,CAAN;AACD;AACD,WAAKA,MAAL,GAAcQ,GAAd;AACA,WAAKH,MAAL,GAAc,IAAIC,MAAJ,CAAWE,MAAMN,SAAjB,CAAd;AACA,WAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAID,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,aAAKrB,WAAWsB,GAAhB,EAAqBD,CAArB,EAAwBV,KAAKU,CAAL,CAAxB;AACD;AACF,KApBM,MAoBA,IAAIH,OAAOK,QAAP,CAAgBZ,IAAhB,CAAJ,EAA2B;AAChC;AACA,UAAIS,MAAM,CAAV;AACA,UAAI,QAAQR,MAAZ,EAAoB;AAClBQ,cAAMR,MAAN;AACD,OAFD,MAEO,IAAIH,cAAc,CAAlB,EAAqB;AAC1BW,cAAMX,WAAN;AACD,OAFM,MAEA;AACLW,cAAMT,KAAKC,MAAL,GAAcE,SAAd,GAA0B,CAAhC;AACD;AACD,UAAIU,iBAAiBV,YAAYM,GAAjC;AACA,WAAKR,MAAL,GAAcQ,GAAd;AACA,UAAIT,KAAKC,MAAL,IAAeY,cAAnB,EAAmC;AACjC,YAAIb,KAAKC,MAAL,GAAcY,cAAlB,EAAkC;AAChC,gBAAM,IAAIL,KAAJ,CAAU,oCAAoCK,cAApC,GAAqD,QAArD,GAAgEb,KAAKC,MAA/E,CAAN;AACD,SAFD,MAEO;AACLb,gBAAM,+BAAN,EAAuCY,KAAKC,MAA5C,EAAoDY,cAApD;AACAb,iBAAOA,KAAKc,KAAL,CAAW,CAAX,EAAcD,cAAd,CAAP;AACD;AACF;AACD,WAAKP,MAAL,GAAcN,IAAd;AACD;AACF;;AAED;AACAD,YAAUgB,SAAV,GAAsBC,OAAOC,MAAP,CAAc5B,WAAW0B,SAAzB,EAAoC;AACxDG,iBAAa;AACXC,aAAOpB,SADI;AAEXqB,kBAAY,KAFD;AAGXC,gBAAU,IAHC;AAIXC,oBAAc;AAJH,KAD2C;AAOxD;AACAhB,YAAQ;AACNa,aAAOlC,KAAKsC,IADN;AAENH,kBAAY,IAFN;AAGNC,gBAAU,IAHJ;AAINC,oBAAc;AAJR,KARgD;AAcxD;AACAE,SAAK;AACHL,aAAOK,GADJ;AAEHJ,kBAAY,IAFT;AAGHC,gBAAU,IAHP;AAIHC,oBAAc;AAJX,KAfmD;AAqBxD;AACAR,WAAO;AACLK,aAAOL,KADF;AAELM,kBAAY,IAFP;AAGLC,gBAAU,IAHL;AAILC,oBAAc;AAJT;AAtBiD,GAApC,CAAtB;;AA8BA;AACAvB,YAAUgB,SAAV,CAAoB1B,WAAWoC,GAA/B,IAAsCC,MAAtC;AACA3B,YAAUgB,SAAV,CAAoB1B,WAAWsB,GAA/B,IAAsCgB,MAAtC;AACA5B,YAAUgB,SAAV,CAAoB1B,WAAWuC,aAA/B,IAAgDA,aAAhD;;AAEA;AACA,MAAI9B,cAAc,CAAlB,EAAqB;AACnBC,cAAUD,WAAV,GAAwBA,WAAxB;AACD;;AAED;AACAC,YAAUH,IAAV,GAAiBA,IAAjB;AACAG,YAAUK,iBAAV,GAA8BR,KAAKiC,WAAL,IAAoB,CAApB,GAAwBjC,KAAKkC,IAA7B,GAAoC7C,KAAK8C,MAAL,CAAYC,OAA9E;AACA7C,SAAOY,UAAUK,iBAAV,GAA8B,CAArC;;AAEA;AACA,MAAIN,cAAc,CAAlB,EAAqB;AACnB;AACAC,cAAU+B,IAAV,GAAiB/B,UAAUK,iBAAV,GAA8BN,WAA/C;AACAC,cAAUkC,SAAV,GAAsBrC,KAAKqC,SAA3B;AACAlC,cAAU8B,WAAV,GAAwB,CAAxB;AACA9B,cAAU0B,GAAV,GAAgBA,GAAhB;AACA1B,cAAUY,GAAV,GAAgBA,GAAhB;AACD,GAPD,MAOO;AACL;AACAZ,cAAU+B,IAAV,GAAiB7C,KAAK8C,MAAL,CAAYC,OAA7B;AACAjC,cAAUkC,SAAV,GAAsBhD,KAAKiD,OAAL,CAAaF,OAAnC;AACAjC,cAAU8B,WAAV,GAAwB,CAAxB;AACA9B,cAAU0B,GAAV,GAAgBU,MAAhB;AACApC,cAAUY,GAAV,GAAgByB,MAAhB;AACD;;AAED;AACArC,YAAUsC,UAAV,GAAuBA,UAAvB;;AAEA,SAAOtC,SAAP;AACD,CA5ID;;AA8IA;;;;;AAKA,SAAS0B,GAAT,CAAcnB,MAAd,EAAsBgC,MAAtB,EAA8B;AAC5BlD,QAAM,0CAAN,EAAkDkD,MAAlD;AACA,MAAIA,SAAS,CAAb,EAAgB;AACdhC,aAASA,OAAOQ,KAAP,CAAawB,MAAb,CAAT;AACD;AACD,SAAO,IAAI,IAAJ,CAAShC,MAAT,CAAP;AACD;;AAED;;;;;AAKA,SAASK,GAAT,CAAcL,MAAd,EAAsBgC,MAAtB,EAA8BnB,KAA9B,EAAqC;AACnC/B,QAAM,0CAAN,EAAkDkB,MAAlD,EAA0DgC,MAA1D,EAAkEnB,KAAlE;AACA,MAAIoB,QAAQ,KAAKd,GAAL,CAASnB,MAAT,EAAiBgC,MAAjB,CAAZ;AACA,MAAIE,aAAarB,iBAAiB,IAAlC;AACA,MAAIqB,UAAJ,EAAgB;AACd,SAAK,IAAI9B,IAAI,CAAb,EAAgBA,IAAIS,MAAMlB,MAA1B,EAAkCS,GAAlC,EAAuC;AACrC6B,YAAMlD,WAAWsB,GAAjB,EAAsBD,CAAtB,EAAyBS,MAAM9B,WAAWoC,GAAjB,EAAsBf,CAAtB,CAAzB;AACD;AACF,GAJD,MAIO,IAAIpB,QAAQ6B,KAAR,CAAJ,EAAoB;AACzB,SAAK,IAAIT,IAAI,CAAb,EAAgBA,IAAIS,MAAMlB,MAA1B,EAAkCS,GAAlC,EAAuC;AACrC6B,YAAMlD,WAAWsB,GAAjB,EAAsBD,CAAtB,EAAyBS,MAAMT,CAAN,CAAzB;AACD;AACF,GAJM,MAIA;AACL,UAAM,IAAIF,KAAJ,CAAU,qCAAqCW,KAA/C,CAAN;AACD;AACF;;AAED;;;;;;;AAOA,SAASgB,MAAT,CAAiB7B,MAAjB,EAAyBgC,MAAzB,EAAiC;AAC/BlD,QAAM,oDAAN,EAA4DkD,MAA5D;AACA,SAAO,IAAI,IAAJ,CAAShC,OAAOmC,WAAP,CAAmBH,MAAnB,CAAT,CAAP;AACD;;AAED;;;;;AAKA,SAASF,MAAT,CAAiB9B,MAAjB,EAAyBgC,MAAzB,EAAiCnB,KAAjC,EAAwC;AACtC/B,QAAM,oDAAN,EAA4DkD,MAA5D;AACA,MAAII,GAAJ;AACA,MAAIvB,iBAAiB,IAArB,EAA2B;AACzBuB,UAAMvB,MAAMb,MAAZ;AACD,GAFD,MAEO;AACLoC,UAAM,IAAI,IAAJ,CAASvB,KAAT,EAAgBb,MAAtB;AACD;AACDrB,OAAK0D,YAAL,CAAkBrC,MAAlB,EAA0BgC,MAA1B,EAAkCI,GAAlC;AACD;;AAED;;;;;;;AAOA,SAASlB,GAAT,GAAgB;AACdpC,QAAM,OAAN;AACA,MAAIQ,OAAO,KAAKsB,WAAhB;AACA,MAAI0B,WAAW,KAAKtC,MAAL,CAAYL,MAA3B;AACA,MAAI4C,IAAI5D,KAAKuC,GAAL,CAAS,KAAKlB,MAAd,CAAR;AACAuC,IAAEjD,IAAF,GAASoB,OAAOC,MAAP,CAAchC,KAAK6D,KAAL,CAAWC,OAAzB,CAAT;AACAF,IAAEjD,IAAF,CAAO6B,GAAP,GAAa,UAAUuB,GAAV,EAAeV,MAAf,EAAuB;AAClC,WAAO,IAAI1C,IAAJ,CAASX,KAAKwD,WAAL,CAAiBO,GAAjB,EAAsBV,SAAS,CAA/B,EAAkCM,QAAlC,CAAT,CAAP;AACD,GAFD;AAGAC,IAAEjD,IAAF,CAAOe,GAAP,GAAa,YAAY;AACvBxB,WAAO,CAAP,EAAU,cAAV;AACD,GAFD;AAGA,SAAO0D,CAAP;AACD;;AAED;;;;AAIA,SAASnB,MAAT,CAAiBuB,KAAjB,EAAwB;AACtB7D,QAAM,mBAAN,EAA2B6D,KAA3B;AACA,MAAInB,OAAO,KAAKZ,WAAL,CAAiBd,iBAA5B;AACA,MAAI8C,WAAW,KAAKhC,WAAL,CAAiBtB,IAAhC;AACA,MAAI0C,SAASR,OAAOmB,KAApB;AACA,MAAIE,MAAMb,SAASR,IAAnB;AACA,MAAIxB,SAAS,KAAKA,MAAlB;AACA,MAAIA,OAAOL,MAAP,GAAgBkD,GAApB,EAAyB;AACvB/D,UAAM,qCAAN,EAA6CkB,OAAOL,MAApD,EAA4DkD,GAA5D;AACA7C,aAASrB,KAAKmE,WAAL,CAAiB9C,MAAjB,EAAyB6C,GAAzB,CAAT;AACA,SAAKxD,OAAL,GAAewD,MAAMrB,IAArB;AACD;AACD,SAAO7C,KAAKwC,GAAL,CAASnB,MAAT,EAAiBgC,MAAjB,EAAyBY,QAAzB,CAAP;AACD;;AAED;;;;AAIA,SAASvB,MAAT,CAAiBsB,KAAjB,EAAwB9B,KAAxB,EAA+B;AAC7B/B,QAAM,mBAAN,EAA2B6D,KAA3B;AACA,MAAInB,OAAO,KAAKZ,WAAL,CAAiBd,iBAA5B;AACA,MAAI8C,WAAW,KAAKhC,WAAL,CAAiBtB,IAAhC;AACA,MAAI0C,SAASR,OAAOmB,KAApB;AACA,MAAIE,MAAMb,SAASR,IAAnB;AACA,MAAIxB,SAAS,KAAKA,MAAlB;AACA,MAAIA,OAAOL,MAAP,GAAgBkD,GAApB,EAAyB;AACvB/D,UAAM,qCAAN,EAA6CkB,OAAOL,MAApD,EAA4DkD,GAA5D;AACA7C,aAASrB,KAAKmE,WAAL,CAAiB9C,MAAjB,EAAyB6C,GAAzB,CAAT;AACD;AACD;;AAEAlE,OAAK0B,GAAL,CAASL,MAAT,EAAiBgC,MAAjB,EAAyBnB,KAAzB,EAAgC+B,QAAhC;AACA,SAAO/B,KAAP;AACD;;AAED,SAASS,aAAT,CAAwByB,SAAxB,EAAmC;AACjC,MAAI,KAAK/C,MAAL,IAAe,CAACrB,KAAKqE,MAAL,CAAY,KAAKhD,MAAjB,CAAhB,IAA4C,KAAKA,MAAL,CAAYL,MAAZ,GAAqBoD,SAArE,EAAgF;AAC9EjE,UAAM,qCAAN,EAA6C,KAAKkB,MAAL,CAAYL,MAAzD,EAAiEoD,SAAjE;AACA,SAAK/C,MAAL,GAAcrB,KAAKmE,WAAL,CAAiB,KAAK9C,MAAtB,EAA8B+C,SAA9B,CAAd;AACD;AACF;;AAED;;;;AAIA,SAASvC,KAAT,CAAgByC,KAAhB,EAAuBJ,GAAvB,EAA4B;AAC1B,MAAInD,IAAJ;;AAEA,MAAImD,GAAJ,EAAS;AACP/D,UAAM,6BAAN,EAAqCmE,KAArC,EAA4CJ,GAA5C;AACAnD,WAAO,KAAKM,MAAL,CAAYQ,KAAZ,CAAkByC,QAAM,KAAKrC,WAAL,CAAiBd,iBAAzC,EAA4D+C,MAAI,KAAKjC,WAAL,CAAiBd,iBAAjF,CAAP;AACD,GAHD,MAGO;AACLhB,UAAM,uBAAN,EAA+BmE,KAA/B;AACAvD,WAAO,KAAKM,MAAL,CAAYQ,KAAZ,CAAkByC,QAAM,KAAKrC,WAAL,CAAiBd,iBAAzC,CAAP;AACD;;AAED,SAAO,IAAI,KAAKc,WAAT,CAAqBlB,IAArB,CAAP;AACD;;AAED;;;;;;;;;AASA,SAASqC,UAAT,CAAqB/B,MAArB,EAA6B;AAC3B,SAAO,IAAI,IAAJ,CAASrB,KAAKuE,qBAAL,CAA2BlD,MAA3B,EAAmC,KAAKV,IAAL,CAAUkC,IAA7C,CAAT,CAAP;AACD","file":"array.js","sourcesContent":["\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar _ref = require('./ref')\r\nvar assert = require('assert')\r\nvar debug = require('debug')('ref:array')\r\nvar ArrayIndex = require('./ArrayIndex')\r\nvar isArray = Array.isArray\r\n\r\n/**\r\n * The Array \"type\" constructor.\r\n * The returned constructor's API is highly influenced by the WebGL\r\n * TypedArray API.\r\n */\r\n\r\nmodule.exports = function Array (_type, _length) {\r\n  debug('defining new array \"type\"')\r\n  var type = _ref.coerceType(_type)\r\n  var fixedLength = _length | 0\r\n\r\n  /**\r\n   * This is the ArrayType \"constructor\" that gets returned.\r\n   */\r\n\r\n  function ArrayType (data, length) {\r\n    if (!(this instanceof ArrayType)) {\r\n      return new ArrayType(data, length)\r\n    }\r\n    debug('creating new array instance')\r\n    ArrayIndex.call(this)\r\n    var item_size = ArrayType.BYTES_PER_ELEMENT\r\n    if (0 === arguments.length) {\r\n      // new IntArray()\r\n      // use the \"fixedLength\" if provided, otherwise throw an Error\r\n      if (fixedLength > 0) {\r\n        this.length = fixedLength\r\n        this.buffer = new Buffer(this.length * item_size)\r\n      } else {\r\n        throw new Error('A \"length\", \"array\" or \"buffer\" must be passed as the first argument')\r\n      }\r\n    } else if ('number' == typeof data) {\r\n      // new IntArray(69)\r\n      this.length = data\r\n      this.buffer = new Buffer(this.length * item_size)\r\n    } else if (isArray(data)) {\r\n      // new IntArray([ 1, 2, 3, 4, 5 ], {len})\r\n      // use optional \"length\" if provided, otherwise use \"fixedLength, otherwise\r\n      // use the Array's .length\r\n      var len = 0\r\n      if (null != length) {\r\n        len = length\r\n      } else if (fixedLength > 0) {\r\n        len = fixedLength\r\n      } else {\r\n        len = data.length\r\n      }\r\n      if (data.length < len) {\r\n        throw new Error('array length must be at least ' + len + ', got ' + data.length)\r\n      }\r\n      this.length = len\r\n      this.buffer = new Buffer(len * item_size)\r\n      for (var i = 0; i < len; i++) {\r\n        this[ArrayIndex.set](i, data[i])\r\n      }\r\n    } else if (Buffer.isBuffer(data)) {\r\n      // new IntArray(Buffer(8))\r\n      var len = 0\r\n      if (null != length) {\r\n        len = length\r\n      } else if (fixedLength > 0) {\r\n        len = fixedLength\r\n      } else {\r\n        len = data.length / item_size | 0\r\n      }\r\n      var expectedLength = item_size * len\r\n      this.length = len\r\n      if (data.length != expectedLength) {\r\n        if (data.length < expectedLength) {\r\n          throw new Error('buffer length must be at least ' + expectedLength + ', got ' + data.length)\r\n        } else {\r\n          debug('resizing buffer from %d to %d', data.length, expectedLength)\r\n          data = data.slice(0, expectedLength)\r\n        }\r\n      }\r\n      this.buffer = data\r\n    }\r\n  }\r\n\r\n  // make array instances inherit from our `ArrayIndex.prototype`\r\n  ArrayType.prototype = Object.create(ArrayIndex.prototype, {\r\n    constructor: {\r\n      value: ArrayType,\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true\r\n    },\r\n    // \"buffer\" is the backing buffer instance\r\n    buffer: {\r\n      value: _ref.NULL,\r\n      enumerable: true,\r\n      writable: true,\r\n      configurable: true\r\n    },\r\n    // \"node-ffi\" calls this when passed an array instance to an ffi'd function\r\n    ref: {\r\n      value: ref,\r\n      enumerable: true,\r\n      writable: true,\r\n      configurable: true\r\n    },\r\n    // \"slice\" implementation\r\n    slice: {\r\n      value: slice,\r\n      enumerable: true,\r\n      writable: true,\r\n      configurable: true\r\n    }\r\n  })\r\n\r\n  // part of the \"array-index\" interface\r\n  ArrayType.prototype[ArrayIndex.get] = getter\r\n  ArrayType.prototype[ArrayIndex.set] = setter\r\n  ArrayType.prototype[ArrayIndex.lengthChanged] = lengthChanged\r\n\r\n  // save down the \"fixedLength\" if specified. \"ref-struct\" needs this value\r\n  if (fixedLength > 0) {\r\n    ArrayType.fixedLength = fixedLength\r\n  }\r\n\r\n  // keep a reference to the base \"type\"\r\n  ArrayType.type = type\r\n  ArrayType.BYTES_PER_ELEMENT = type.indirection == 1 ? type.size : _ref.sizeof.pointer\r\n  assert(ArrayType.BYTES_PER_ELEMENT > 0)\r\n\r\n  // the ref \"type\" interface\r\n  if (fixedLength > 0) {\r\n    // this \"type\" is probably going in a ref-struct or being used manually\r\n    ArrayType.size = ArrayType.BYTES_PER_ELEMENT * fixedLength\r\n    ArrayType.alignment = type.alignment\r\n    ArrayType.indirection = 1\r\n    ArrayType.get = get\r\n    ArrayType.set = set\r\n  } else {\r\n    // this \"type\" is probably an argument/return value for a node-ffi function\r\n    ArrayType.size = _ref.sizeof.pointer\r\n    ArrayType.alignment = _ref.alignof.pointer\r\n    ArrayType.indirection = 1\r\n    ArrayType.get = getRef\r\n    ArrayType.set = setRef\r\n  }\r\n\r\n  // untilZeros() function\r\n  ArrayType.untilZeros = untilZeros\r\n\r\n  return ArrayType\r\n}\r\n\r\n/**\r\n * The \"get\" function of the Array \"type\" interface.\r\n * Most likely invoked when accessing within a \"ref-struct\" type.\r\n */\r\n\r\nfunction get (buffer, offset) {\r\n  debug('Array \"type\" getter for buffer at offset', offset)\r\n  if (offset > 0) {\r\n    buffer = buffer.slice(offset)\r\n  }\r\n  return new this(buffer)\r\n}\r\n\r\n/**\r\n * The \"set\" function of the Array \"type\" interface.\r\n * Most likely invoked when setting within a \"ref-struct\" type.\r\n */\r\n\r\nfunction set (buffer, offset, value) {\r\n  debug('Array \"type\" setter for buffer at offset', buffer, offset, value)\r\n  var array = this.get(buffer, offset)\r\n  var isInstance = value instanceof this\r\n  if (isInstance) {\r\n    for (var i = 0; i < value.length; i++) {\r\n      array[ArrayIndex.set](i, value[ArrayIndex.get](i));\r\n    }\r\n  } else if (isArray(value)) {\r\n    for (var i = 0; i < value.length; i++) {\r\n      array[ArrayIndex.set](i, value[i]);\r\n    }\r\n  } else {\r\n    throw new Error('not sure how to set into Array: ' + value)\r\n  }\r\n}\r\n\r\n/**\r\n * Reads a pointer from the given offset and returns a new \"array\" instance of\r\n * this type.\r\n * Most likely invoked when getting an array instance back as a return value from\r\n * an FFI'd function.\r\n */\r\n\r\nfunction getRef (buffer, offset) {\r\n  debug('Array reference \"type\" getter for buffer at offset', offset)\r\n  return new this(buffer.readPointer(offset))\r\n}\r\n\r\n/**\r\n * Most likely invoked when passing an array instance as an argument to an FFI'd\r\n * function.\r\n */\r\n\r\nfunction setRef (buffer, offset, value) {\r\n  debug('Array reference \"type\" setter for buffer at offset', offset)\r\n  var ptr\r\n  if (value instanceof this) {\r\n    ptr = value.buffer\r\n  } else {\r\n    ptr = new this(value).buffer\r\n  }\r\n  _ref.writePointer(buffer, offset, ptr)\r\n}\r\n\r\n/**\r\n * Returns a reference to the backing buffer of this Array instance.\r\n *\r\n * i.e. if the array represents `int[]` (a.k.a. `int *`),\r\n *      then the returned Buffer represents `int (*)[]` (a.k.a. `int **`)\r\n */\r\n\r\nfunction ref () {\r\n  debug('ref()')\r\n  var type = this.constructor\r\n  var origSize = this.buffer.length\r\n  var r = _ref.ref(this.buffer)\r\n  r.type = Object.create(_ref.types.CString)\r\n  r.type.get = function (buf, offset) {\r\n    return new type(_ref.readPointer(buf, offset | 0, origSize))\r\n  }\r\n  r.type.set = function () {\r\n    assert(0, 'implement!!!')\r\n  }\r\n  return r\r\n}\r\n\r\n/**\r\n * The \"getter\" implementation for the \"array-index\" interface.\r\n */\r\n\r\nfunction getter (index) {\r\n  debug('getting array[%d]', index)\r\n  var size = this.constructor.BYTES_PER_ELEMENT\r\n  var baseType = this.constructor.type\r\n  var offset = size * index\r\n  var end = offset + size\r\n  var buffer = this.buffer\r\n  if (buffer.length < end) {\r\n    debug('reinterpreting buffer from %d to %d', buffer.length, end)\r\n    buffer = _ref.reinterpret(buffer, end)\r\n    this._length = end / size\r\n  }\r\n  return _ref.get(buffer, offset, baseType)\r\n}\r\n\r\n/**\r\n * The \"setter\" implementation for  the \"array-index\" interface.\r\n */\r\n\r\nfunction setter (index, value) {\r\n  debug('setting array[%d]', index)\r\n  var size = this.constructor.BYTES_PER_ELEMENT\r\n  var baseType = this.constructor.type\r\n  var offset = size * index\r\n  var end = offset + size\r\n  var buffer = this.buffer\r\n  if (buffer.length < end) {\r\n    debug('reinterpreting buffer from %d to %d', buffer.length, end)\r\n    buffer = _ref.reinterpret(buffer, end)\r\n  }\r\n  // TODO: DRY with getter()\r\n\r\n  _ref.set(buffer, offset, value, baseType)\r\n  return value\r\n}\r\n\r\nfunction lengthChanged (newLength) {\r\n  if (this.buffer && !_ref.isNull(this.buffer) && this.buffer.length < newLength) {\r\n    debug('reinterpreting buffer from %d to %d', this.buffer.length, newLength)\r\n    this.buffer = _ref.reinterpret(this.buffer, newLength)\r\n  }\r\n}\r\n\r\n/**\r\n * The \"slice\" implementation.\r\n */\r\n\r\nfunction slice (start, end) {\r\n  var data\r\n\r\n  if (end) {\r\n    debug('slicing array from %d to %d', start, end)\r\n    data = this.buffer.slice(start*this.constructor.BYTES_PER_ELEMENT, end*this.constructor.BYTES_PER_ELEMENT)\r\n  } else {\r\n    debug('slicing array from %d', start)\r\n    data = this.buffer.slice(start*this.constructor.BYTES_PER_ELEMENT)\r\n  }\r\n\r\n  return new this.constructor(data)\r\n}\r\n\r\n/**\r\n * Accepts a Buffer instance that should be an already-populated with data for the\r\n * ArrayType. The \"length\" of the Array is determined by searching through the\r\n * buffer's contents until an aligned NULL pointer is encountered.\r\n *\r\n * @param {Buffer} buffer the null-terminated buffer to convert into an Array\r\n * @api public\r\n */\r\n\r\nfunction untilZeros (buffer) {\r\n  return new this(_ref.reinterpretUntilZeros(buffer, this.type.size))\r\n}\r\n"]}