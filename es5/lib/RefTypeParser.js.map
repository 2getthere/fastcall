{"version":3,"sources":["../../lib/RefTypeParser.js"],"names":["_","require","assert","verify","a","ert","ref","ArrayType","StructType","UnionType","util","rex","RefTypeParser","parser","def","typeHint","isPlainObject","_parseObject","isString","_parseString","keys","length","_makeInvalidMessage","name","body","type","factoryType","_getFactoryType","isFunction","created","_makeType","parsed","_parseArray","_parseFields","defBody","_resolveStringTypes","_resolveStringType","keyword","match","matchFields","parts","part","fieldDecl","trim","decl","_parseDeclaration","title","isInterface","matchArrayDeclaration","inspect","module","exports"],"mappings":"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","file":"RefTypeParser.js","sourcesContent":["/*\r\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n'use strict';\r\nconst _ = require('lodash');\r\nconst assert = require('assert');\r\nconst verify = require('./verify');\r\nconst a = verify.a;\r\nconst ert = verify.ert;\r\nconst ref = require('./ref-libs/ref');\r\nconst ArrayType = require('./ref-libs/array');\r\nconst StructType = require('./ref-libs/struct');\r\nconst UnionType = require('./ref-libs/union');\r\nconst util = require('util');\r\nconst rex = require('./rex');\r\n\r\nclass RefTypeParser {\r\n    constructor(parser) {\r\n        a&&ert(parser);\r\n\r\n        this.parser = parser;\r\n    }\r\n\r\n    parse(def, typeHint) {\r\n        if (_.isPlainObject(def)) {\r\n            return this._parseObject(def, typeHint);\r\n        }\r\n        if (_.isString(def)) {\r\n            return this._parseString(def, typeHint);\r\n        }\r\n        assert(false, 'Argument is not a ref type definition.');\r\n    }\r\n\r\n    _parseObject(def, typeHint) {\r\n        const keys = _.keys(def);\r\n        assert(keys.length === 1, RefTypeParser._makeInvalidMessage(def));\r\n        const name = keys[0];\r\n        let body = def[name];\r\n        let type = null;\r\n        let factoryType = RefTypeParser._getFactoryType(typeHint);\r\n\r\n        if (_.isFunction(body)) {\r\n            type = body;\r\n        }\r\n        else if (_.isPlainObject(body) || _.isString(body)) {\r\n            let created = this._makeType(factoryType, body);\r\n            type = created.type;\r\n            body = created.body;\r\n        }\r\n        else {\r\n            assert(false, RefTypeParser._makeInvalidMessage(def));\r\n        }\r\n\r\n        return {\r\n            name,\r\n            factoryType,\r\n            body,\r\n            type\r\n        };\r\n    }\r\n\r\n    _parseString(def, typeHint) {\r\n        const factoryType = RefTypeParser._getFactoryType(typeHint);\r\n        let parsed;\r\n        if (typeHint === 'array') {\r\n            parsed = this._parseArray(def);\r\n        }\r\n        else {\r\n            parsed = this._parseFields(def, typeHint);            \r\n        }\r\n        const { type, body } = this._makeType(factoryType, parsed.defBody);\r\n        return {\r\n            name: parsed.name,\r\n            factoryType,\r\n            body,\r\n            type\r\n        };\r\n    }\r\n\r\n    _makeType(factoryType, body) {\r\n        if (_.isPlainObject(body)) {\r\n            body = this.parser._resolveStringTypes(body);\r\n        }\r\n        else if (_.isString(body)) {\r\n            body = this.parser._resolveStringType(body);\r\n        }\r\n        return { type: new factoryType(body), body };\r\n    }\r\n\r\n    static _makeInvalidMessage(def) {\r\n        return `Invalid ref type definition: ${ util.inspect(def) }`;\r\n    }\r\n\r\n    static _getFactoryType(typeHint) {\r\n        switch (typeHint) {\r\n            case 'array':\r\n                return ArrayType;\r\n            case 'union':\r\n                return UnionType;\r\n            case 'struct':\r\n                return StructType;\r\n            default:\r\n                return assert(false, `Unknown type hint: ${ typeHint }`);\r\n        }\r\n    }\r\n\r\n    _parseFields(def, keyword) {\r\n        const match = rex.matchFields(keyword, def);\r\n        assert(match, `Invalid ${ keyword } definition format.`);\r\n        const defBody = {};\r\n        for (const part of match.parts) {\r\n            const fieldDecl = part.trim();\r\n            if (fieldDecl) {\r\n                const decl = this.parser._parseDeclaration({\r\n                    def: part,\r\n                    title: 'field',\r\n                    isInterface: false\r\n                });\r\n                defBody[decl.name] = decl.type;\r\n            }\r\n        }\r\n        return { \r\n            name: match.name, \r\n            defBody \r\n        };\r\n    }\r\n\r\n    _parseArray(def) {\r\n        const match = rex.matchArrayDeclaration(def);\r\n        assert(match, `Invalid array definition format.`);\r\n\r\n        return match;\r\n    }\r\n}\r\n\r\nmodule.exports = RefTypeParser;"]}