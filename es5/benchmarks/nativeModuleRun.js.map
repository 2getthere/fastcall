{"version":3,"sources":["benchmarks/nativeModuleRun.js"],"names":["Promise","require","async","coroutine","imports","config","assert","common","module","exports","importBenchmod","console","log","syncRun","asyncRun","result","addNumbers","measure","addNumbersAsync","promisify","measureAsync"],"mappings":"AAAA;;AACA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,QAAQF,QAAQG,SAAtB;AACA,IAAMC,UAAUH,QAAQ,WAAR,CAAhB;AACA,IAAMI,SAASJ,QAAQ,UAAR,CAAf;AACA,IAAMK,SAASL,QAAQ,QAAR,CAAf;AACA,IAAMM,SAASN,QAAQ,UAAR,CAAf;;AAEAO,OAAOC,OAAP,GAAiBP,8BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AACbM,0BADa,GACJJ,QAAQM,cAAR,EADI;;;AAGnBC,4BAAQC,GAAR,CAAY,cAAZ;AACAC,4BAAQL,MAAR;AACAG,4BAAQC,GAAR,CAAY,eAAZ;AALmB;AAAA,2BAMbE,SAASN,MAAT,CANa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAN,EAAjB;;AASA,SAASK,OAAT,CAAiBL,MAAjB,EAAyB;AACrB,QAAIO,SAAS,CAAb;AACA,QAAMC,aAAaR,OAAOQ,UAA1B;AACAT,WAAOU,OAAP,CAAe,YAAf,EAA6B,CAA7B,EAAgC,YAAM;AAClCF,iBAASC,WAAWA,WAAW,GAAX,EAAgB,CAAhB,CAAX,EAA+BA,WAAW,GAAX,EAAgB,CAAhB,CAA/B,CAAT;AACH,KAFD;AAGAV,WAAOS,WAAW,MAAM,CAAN,GAAU,CAAV,GAAc,CAAhC;AACH;;AAED,IAAID,WAAWZ,8BAAM,kBAAWM,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACbO,0BADa,GACJ,CADI;AAEXG,mCAFW,GAEQlB,QAAQmB,SAAR,CAAkBX,OAAOU,eAAzB,CAFR;AAAA;AAAA,2BAGXX,OAAOa,YAAP,CAAoB,YAApB,EAAkC,CAAlC,EAAqClB,8BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACRgB,gBAAgB,GAAhB,EAAqB,CAArB,CADQ;;AAAA;AAAA;AAAA;AAAA,+CACuBA,gBAAgB,GAAhB,EAAqB,CAArB,CADvB;;AAAA;AAAA;AAAA;AAAA,+CAC9BA,eAD8B;;AAAA;AAC7CH,8CAD6C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAN,EAArC,CAHW;;AAAA;AAMjBT,2BAAOS,WAAW,MAAM,CAAN,GAAU,CAAV,GAAc,CAAhC;;AANiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAN,EAAf","file":"nativeModuleRun.js","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\nconst imports = require('./imports');\nconst config = require('./config');\nconst assert = require('assert');\nconst common = require('./common');\n\nmodule.exports = async(function* () {\n    const module = imports.importBenchmod();\n\n    console.log('--- sync ---');\n    syncRun(module);\n    console.log('--- async ---');\n    yield asyncRun(module);\n});\n\nfunction syncRun(module) {\n    let result = 0;\n    const addNumbers = module.addNumbers;\n    common.measure('addNumbers', 3, () => {\n        result = addNumbers(addNumbers(5.5, 5), addNumbers(1.1, 1));\n    });\n    assert(result === 5.5 + 5 + 1 + 1);\n}\n\nvar asyncRun = async(function* (module) {\n    let result = 0;\n    const addNumbersAsync =  Promise.promisify(module.addNumbersAsync);\n    yield common.measureAsync('addNumbers', 3, async(function* () {\n        result = yield addNumbersAsync(yield addNumbersAsync(5.5, 5), yield addNumbersAsync(1.1, 1));\n    }));\n    assert(result === 5.5 + 5 + 1 + 1);\n});"]}