{"version":3,"sources":["../../benchmarks/fastcallRun.js"],"names":["Promise","require","async","coroutine","imports","config","assert","common","module","exports","importBenchlib","fastcallWay","lib","console","log","syncRun","asyncRun","result","addNumbers","interface","addNumbersExp","measure","equal","addNumbersAsync","functions","measureAsync"],"mappings":"AAAA;;AACA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,QAAQF,QAAQG,SAAtB;AACA,IAAMC,UAAUH,QAAQ,WAAR,CAAhB;AACA,IAAMI,SAASJ,QAAQ,UAAR,CAAf;AACA,IAAMK,SAASL,QAAQ,QAAR,CAAf;AACA,IAAMM,SAASN,QAAQ,UAAR,CAAf;;AAEAO,OAAOC,OAAP,GAAiBP,8BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACDE,QAAQM,cAAR,CAAuBC,WAAvB,EADC;;AAAA;AACbC,uBADa;;;AAGnBC,4BAAQC,GAAR,CAAY,cAAZ;AACAC,4BAAQH,GAAR;AACAC,4BAAQC,GAAR,CAAY,eAAZ;AALmB;AAAA,2BAMbE,SAASJ,GAAT,CANa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAN,EAAjB;;AASA,SAASG,OAAT,CAAiBH,GAAjB,EAAsB;AAClB,QAAIK,SAAS,CAAb;AACA,QAAMC,aAAaN,IAAIO,SAAJ,CAAcC,aAAjC;AACAb,WAAOc,OAAP,CAAe,YAAf,EAA6B,CAA7B,EAAgC,YAAM;AAClCJ,iBAASC,WAAWA,WAAW,GAAX,EAAgB,CAAhB,CAAX,EAA+BA,WAAW,GAAX,EAAgB,CAAhB,CAA/B,CAAT;AACH,KAFD;AAGAZ,WAAOgB,KAAP,CAAaL,MAAb,EAAqB,MAAM,CAAN,GAAU,CAAV,GAAc,CAAnC;AACH;;AAED,IAAID,WAAWd,8BAAM,kBAAWU,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACbK,0BADa,GACJ,CADI;AAEXM,mCAFW,GAEOX,IAAIY,SAAJ,CAAcJ,aAAd,CAA4BlB,KAA5B,EAFP;AAAA;AAAA,2BAGXK,OAAOkB,YAAP,CAAoB,YAApB,EAAkC,CAAlC,EAAqCvB,8BAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACRqB,gBAAgB,GAAhB,EAAqB,CAArB,CADQ;;AAAA;AAAA;AAAA;AAAA,+CACuBA,gBAAgB,GAAhB,EAAqB,CAArB,CADvB;;AAAA;AAAA;AAAA;AAAA,+CAC9BA,eAD8B;;AAAA;AAC7CN,8CAD6C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAN,EAArC,CAHW;;AAAA;AAMjBX,2BAAOgB,KAAP,CAAaL,MAAb,EAAqB,MAAM,CAAN,GAAU,CAAV,GAAc,CAAnC;;AANiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAN,EAAf","file":"fastcallRun.js","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\nconst imports = require('./imports');\nconst config = require('./config');\nconst assert = require('assert');\nconst common = require('./common');\n\nmodule.exports = async(function* () {\n    const lib = yield imports.importBenchlib.fastcallWay();\n\n    console.log('--- sync ---');\n    syncRun(lib);\n    console.log('--- async ---');\n    yield asyncRun(lib);\n});\n\nfunction syncRun(lib) {\n    let result = 0;\n    const addNumbers = lib.interface.addNumbersExp;\n    common.measure('addNumbers', 3, () => {\n        result = addNumbers(addNumbers(5.5, 5), addNumbers(1.1, 1));\n    });\n    assert.equal(result, 5.5 + 5 + 1 + 1);\n}\n\nvar asyncRun = async(function* (lib) {\n    let result = 0;\n    const addNumbersAsync = lib.functions.addNumbersExp.async();\n    yield common.measureAsync('addNumbers', 3, async(function* () {\n        result = yield addNumbersAsync(yield addNumbersAsync(5.5, 5), yield addNumbersAsync(1.1, 1));\n    }));\n    assert.equal(result, 5.5 + 5 + 1 + 1);\n});"]}